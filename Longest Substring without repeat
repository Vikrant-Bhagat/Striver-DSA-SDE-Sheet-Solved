class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector < int > mpp(256, -1);

      int left = 0, right = 0;
      int n = s.size();
      int len = 0;
      while (right < n) {
        if (mpp[s[right]] != -1)
          left = max(mpp[s[right]] + 1, left);

        mpp[s[right]] = right;

        len = max(len, right - left + 1);
        right++;
      }
      return len;
    //    unordered_set<char> set;
    //    int count=1,maxcount=0;
    //    for(int i=0;i<s.length();i++){
    //         set.insert(s[i]);
    //         for(int j=i+1;j<s.length();j++){
    //             if(set.find(s[j])==set.end()){
    //                 count++;
    //                 set.insert(s[j]);
    //             }
    //             else{
    //                 break;                    
    //             }
    //         }
    //         maxcount=max(count,maxcount);
    //         count=1;
    //         set.clear();
    //    } 
    //    return maxcount;
    }
};
